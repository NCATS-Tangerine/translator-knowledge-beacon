# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BeaconPredicate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, edge_label: str=None, relation: str=None, description: str=None, frequency: int=None):  # noqa: E501
        """BeaconPredicate - a model defined in Swagger

        :param edge_label: The edge_label of this BeaconPredicate.  # noqa: E501
        :type edge_label: str
        :param relation: The relation of this BeaconPredicate.  # noqa: E501
        :type relation: str
        :param description: The description of this BeaconPredicate.  # noqa: E501
        :type description: str
        :param frequency: The frequency of this BeaconPredicate.  # noqa: E501
        :type frequency: int
        """
        self.swagger_types = {
            'edge_label': str,
            'relation': str,
            'description': str,
            'frequency': int
        }

        self.attribute_map = {
            'edge_label': 'edge_label',
            'relation': 'relation',
            'description': 'description',
            'frequency': 'frequency'
        }

        self._edge_label = edge_label
        self._relation = relation
        self._description = description
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconPredicate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconPredicate of this BeaconPredicate.  # noqa: E501
        :rtype: BeaconPredicate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edge_label(self) -> str:
        """Gets the edge_label of this BeaconPredicate.

        A predicate edge label which must be taken from the minimal predicate ('slot') list of the [Biolink Model](https://biolink.github.io/biolink-model).   # noqa: E501

        :return: The edge_label of this BeaconPredicate.
        :rtype: str
        """
        return self._edge_label

    @edge_label.setter
    def edge_label(self, edge_label: str):
        """Sets the edge_label of this BeaconPredicate.

        A predicate edge label which must be taken from the minimal predicate ('slot') list of the [Biolink Model](https://biolink.github.io/biolink-model).   # noqa: E501

        :param edge_label: The edge_label of this BeaconPredicate.
        :type edge_label: str
        """

        self._edge_label = edge_label

    @property
    def relation(self) -> str:
        """Gets the relation of this BeaconPredicate.

        The predicate relation, with the preferred format being a CURIE where one exists, but strings/labels acceptable. This relation  may be equivalent to the edge_label (e.g. edge_label: has_phenotype, relation: RO:0002200), or a more specific relation in cases where the source provides more granularity  (e.g. edge_label: molecularly_interacts_with, relation: RO:0002447)   # noqa: E501

        :return: The relation of this BeaconPredicate.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation: str):
        """Sets the relation of this BeaconPredicate.

        The predicate relation, with the preferred format being a CURIE where one exists, but strings/labels acceptable. This relation  may be equivalent to the edge_label (e.g. edge_label: has_phenotype, relation: RO:0002200), or a more specific relation in cases where the source provides more granularity  (e.g. edge_label: molecularly_interacts_with, relation: RO:0002447)   # noqa: E501

        :param relation: The relation of this BeaconPredicate.
        :type relation: str
        """

        self._relation = relation

    @property
    def description(self) -> str:
        """Gets the description of this BeaconPredicate.

        human readable definition of predicate relation  provided by this beacon   # noqa: E501

        :return: The description of this BeaconPredicate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BeaconPredicate.

        human readable definition of predicate relation  provided by this beacon   # noqa: E501

        :param description: The description of this BeaconPredicate.
        :type description: str
        """

        self._description = description

    @property
    def frequency(self) -> int:
        """Gets the frequency of this BeaconPredicate.

        the number of statement entries using the specified predicate in the given beacon knowledge base  # noqa: E501

        :return: The frequency of this BeaconPredicate.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this BeaconPredicate.

        the number of statement entries using the specified predicate in the given beacon knowledge base  # noqa: E501

        :param frequency: The frequency of this BeaconPredicate.
        :type frequency: int
        """

        self._frequency = frequency
