# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.beacon_knowledge_map_object import BeaconKnowledgeMapObject  # noqa: F401,E501
from swagger_server.models.beacon_knowledge_map_predicate import BeaconKnowledgeMapPredicate  # noqa: F401,E501
from swagger_server.models.beacon_knowledge_map_subject import BeaconKnowledgeMapSubject  # noqa: F401,E501
from swagger_server import util


class BeaconKnowledgeMapStatement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, subject: BeaconKnowledgeMapSubject=None, predicate: BeaconKnowledgeMapPredicate=None, object: BeaconKnowledgeMapObject=None, frequency: int=None, description: str=None):  # noqa: E501
        """BeaconKnowledgeMapStatement - a model defined in Swagger

        :param subject: The subject of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type subject: BeaconKnowledgeMapSubject
        :param predicate: The predicate of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type predicate: BeaconKnowledgeMapPredicate
        :param object: The object of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type object: BeaconKnowledgeMapObject
        :param frequency: The frequency of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type frequency: int
        :param description: The description of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'subject': BeaconKnowledgeMapSubject,
            'predicate': BeaconKnowledgeMapPredicate,
            'object': BeaconKnowledgeMapObject,
            'frequency': int,
            'description': str
        }

        self.attribute_map = {
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object',
            'frequency': 'frequency',
            'description': 'description'
        }

        self._subject = subject
        self._predicate = predicate
        self._object = object
        self._frequency = frequency
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconKnowledgeMapStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconKnowledgeMapStatement of this BeaconKnowledgeMapStatement.  # noqa: E501
        :rtype: BeaconKnowledgeMapStatement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self) -> BeaconKnowledgeMapSubject:
        """Gets the subject of this BeaconKnowledgeMapStatement.


        :return: The subject of this BeaconKnowledgeMapStatement.
        :rtype: BeaconKnowledgeMapSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject: BeaconKnowledgeMapSubject):
        """Sets the subject of this BeaconKnowledgeMapStatement.


        :param subject: The subject of this BeaconKnowledgeMapStatement.
        :type subject: BeaconKnowledgeMapSubject
        """

        self._subject = subject

    @property
    def predicate(self) -> BeaconKnowledgeMapPredicate:
        """Gets the predicate of this BeaconKnowledgeMapStatement.


        :return: The predicate of this BeaconKnowledgeMapStatement.
        :rtype: BeaconKnowledgeMapPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate: BeaconKnowledgeMapPredicate):
        """Sets the predicate of this BeaconKnowledgeMapStatement.


        :param predicate: The predicate of this BeaconKnowledgeMapStatement.
        :type predicate: BeaconKnowledgeMapPredicate
        """

        self._predicate = predicate

    @property
    def object(self) -> BeaconKnowledgeMapObject:
        """Gets the object of this BeaconKnowledgeMapStatement.


        :return: The object of this BeaconKnowledgeMapStatement.
        :rtype: BeaconKnowledgeMapObject
        """
        return self._object

    @object.setter
    def object(self, object: BeaconKnowledgeMapObject):
        """Sets the object of this BeaconKnowledgeMapStatement.


        :param object: The object of this BeaconKnowledgeMapStatement.
        :type object: BeaconKnowledgeMapObject
        """

        self._object = object

    @property
    def frequency(self) -> int:
        """Gets the frequency of this BeaconKnowledgeMapStatement.

        the frequency of statements of the specified relationship within the given beacon   # noqa: E501

        :return: The frequency of this BeaconKnowledgeMapStatement.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this BeaconKnowledgeMapStatement.

        the frequency of statements of the specified relationship within the given beacon   # noqa: E501

        :param frequency: The frequency of this BeaconKnowledgeMapStatement.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def description(self) -> str:
        """Gets the description of this BeaconKnowledgeMapStatement.

        a description of the nature of the relationship   # noqa: E501

        :return: The description of this BeaconKnowledgeMapStatement.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BeaconKnowledgeMapStatement.

        a description of the nature of the relationship   # noqa: E501

        :param description: The description of this BeaconKnowledgeMapStatement.
        :type description: str
        """

        self._description = description
