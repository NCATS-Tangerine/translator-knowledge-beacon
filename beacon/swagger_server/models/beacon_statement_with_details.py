# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.beacon_statement_annotation import BeaconStatementAnnotation  # noqa: F401,E501
from swagger_server.models.beacon_statement_citation import BeaconStatementCitation  # noqa: F401,E501
from swagger_server import util


class BeaconStatementWithDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_defined_by: str=None, provided_by: str=None, qualifiers: List[str]=None, annotation: List[BeaconStatementAnnotation]=None, evidence: List[BeaconStatementCitation]=None):  # noqa: E501
        """BeaconStatementWithDetails - a model defined in Swagger

        :param id: The id of this BeaconStatementWithDetails.  # noqa: E501
        :type id: str
        :param is_defined_by: The is_defined_by of this BeaconStatementWithDetails.  # noqa: E501
        :type is_defined_by: str
        :param provided_by: The provided_by of this BeaconStatementWithDetails.  # noqa: E501
        :type provided_by: str
        :param qualifiers: The qualifiers of this BeaconStatementWithDetails.  # noqa: E501
        :type qualifiers: List[str]
        :param annotation: The annotation of this BeaconStatementWithDetails.  # noqa: E501
        :type annotation: List[BeaconStatementAnnotation]
        :param evidence: The evidence of this BeaconStatementWithDetails.  # noqa: E501
        :type evidence: List[BeaconStatementCitation]
        """
        self.swagger_types = {
            'id': str,
            'is_defined_by': str,
            'provided_by': str,
            'qualifiers': List[str],
            'annotation': List[BeaconStatementAnnotation],
            'evidence': List[BeaconStatementCitation]
        }

        self.attribute_map = {
            'id': 'id',
            'is_defined_by': 'is_defined_by',
            'provided_by': 'provided_by',
            'qualifiers': 'qualifiers',
            'annotation': 'annotation',
            'evidence': 'evidence'
        }

        self._id = id
        self._is_defined_by = is_defined_by
        self._provided_by = provided_by
        self._qualifiers = qualifiers
        self._annotation = annotation
        self._evidence = evidence

    @classmethod
    def from_dict(cls, dikt) -> 'BeaconStatementWithDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BeaconStatementWithDetails of this BeaconStatementWithDetails.  # noqa: E501
        :rtype: BeaconStatementWithDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BeaconStatementWithDetails.

        Statement identifier of the statement made in an edge (echoed back)   # noqa: E501

        :return: The id of this BeaconStatementWithDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BeaconStatementWithDetails.

        Statement identifier of the statement made in an edge (echoed back)   # noqa: E501

        :param id: The id of this BeaconStatementWithDetails.
        :type id: str
        """

        self._id = id

    @property
    def is_defined_by(self) -> str:
        """Gets the is_defined_by of this BeaconStatementWithDetails.

        A CURIE/URI for the translator group that wrapped this knowledge source ('beacon') that publishes the statement made in an edge.   # noqa: E501

        :return: The is_defined_by of this BeaconStatementWithDetails.
        :rtype: str
        """
        return self._is_defined_by

    @is_defined_by.setter
    def is_defined_by(self, is_defined_by: str):
        """Sets the is_defined_by of this BeaconStatementWithDetails.

        A CURIE/URI for the translator group that wrapped this knowledge source ('beacon') that publishes the statement made in an edge.   # noqa: E501

        :param is_defined_by: The is_defined_by of this BeaconStatementWithDetails.
        :type is_defined_by: str
        """

        self._is_defined_by = is_defined_by

    @property
    def provided_by(self) -> str:
        """Gets the provided_by of this BeaconStatementWithDetails.

        A CURIE prefix, e.g. Pharos, MGI, Monarch. The group that curated/asserted the statement made in an edge.   # noqa: E501

        :return: The provided_by of this BeaconStatementWithDetails.
        :rtype: str
        """
        return self._provided_by

    @provided_by.setter
    def provided_by(self, provided_by: str):
        """Sets the provided_by of this BeaconStatementWithDetails.

        A CURIE prefix, e.g. Pharos, MGI, Monarch. The group that curated/asserted the statement made in an edge.   # noqa: E501

        :param provided_by: The provided_by of this BeaconStatementWithDetails.
        :type provided_by: str
        """

        self._provided_by = provided_by

    @property
    def qualifiers(self) -> List[str]:
        """Gets the qualifiers of this BeaconStatementWithDetails.

        (Optional) terms representing qualifiers that modify or qualify the meaning of the statement made in an edge.   # noqa: E501

        :return: The qualifiers of this BeaconStatementWithDetails.
        :rtype: List[str]
        """
        return self._qualifiers

    @qualifiers.setter
    def qualifiers(self, qualifiers: List[str]):
        """Sets the qualifiers of this BeaconStatementWithDetails.

        (Optional) terms representing qualifiers that modify or qualify the meaning of the statement made in an edge.   # noqa: E501

        :param qualifiers: The qualifiers of this BeaconStatementWithDetails.
        :type qualifiers: List[str]
        """

        self._qualifiers = qualifiers

    @property
    def annotation(self) -> List[BeaconStatementAnnotation]:
        """Gets the annotation of this BeaconStatementWithDetails.

        Extra edge properties, generally compliant with Translator Knowledge Graph Standard Specification   # noqa: E501

        :return: The annotation of this BeaconStatementWithDetails.
        :rtype: List[BeaconStatementAnnotation]
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation: List[BeaconStatementAnnotation]):
        """Sets the annotation of this BeaconStatementWithDetails.

        Extra edge properties, generally compliant with Translator Knowledge Graph Standard Specification   # noqa: E501

        :param annotation: The annotation of this BeaconStatementWithDetails.
        :type annotation: List[BeaconStatementAnnotation]
        """

        self._annotation = annotation

    @property
    def evidence(self) -> List[BeaconStatementCitation]:
        """Gets the evidence of this BeaconStatementWithDetails.

        Array of research citations serving as supporting evidence for this knowledge statement.   # noqa: E501

        :return: The evidence of this BeaconStatementWithDetails.
        :rtype: List[BeaconStatementCitation]
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence: List[BeaconStatementCitation]):
        """Sets the evidence of this BeaconStatementWithDetails.

        Array of research citations serving as supporting evidence for this knowledge statement.   # noqa: E501

        :param evidence: The evidence of this BeaconStatementWithDetails.
        :type evidence: List[BeaconStatementCitation]
        """

        self._evidence = evidence
